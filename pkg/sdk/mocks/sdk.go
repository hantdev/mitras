// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	errors "github.com/hantdev/mitras/pkg/errors"
	mock "github.com/stretchr/testify/mock"

	sdk "github.com/hantdev/mitras/pkg/sdk"

	time "time"
)

// SDK is an autogenerated mock type for the SDK type
type SDK struct {
	mock.Mock
}

// AcceptInvitation provides a mock function with given fields: domainID, token
func (_m *SDK) AcceptInvitation(domainID string, token string) error {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for AcceptInvitation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(domainID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddChildren provides a mock function with given fields: id, domainID, groupIDs, token
func (_m *SDK) AddChildren(id string, domainID string, groupIDs []string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, groupIDs, token)

	if len(ret) == 0 {
		panic("no return value specified for AddChildren")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, []string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, groupIDs, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// AddClientRoleActions provides a mock function with given fields: id, roleID, domainID, actions, token
func (_m *SDK) AddClientRoleActions(id string, roleID string, domainID string, actions []string, token string) ([]string, errors.SDKError) {
	ret := _m.Called(id, roleID, domainID, actions, token)

	if len(ret) == 0 {
		panic("no return value specified for AddClientRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, []string, string) ([]string, errors.SDKError)); ok {
		return rf(id, roleID, domainID, actions, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, []string, string) []string); ok {
		r0 = rf(id, roleID, domainID, actions, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, []string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, domainID, actions, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// AddClientRoleMembers provides a mock function with given fields: id, roleID, domainID, members, token
func (_m *SDK) AddClientRoleMembers(id string, roleID string, domainID string, members []string, token string) ([]string, errors.SDKError) {
	ret := _m.Called(id, roleID, domainID, members, token)

	if len(ret) == 0 {
		panic("no return value specified for AddClientRoleMembers")
	}

	var r0 []string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, []string, string) ([]string, errors.SDKError)); ok {
		return rf(id, roleID, domainID, members, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, []string, string) []string); ok {
		r0 = rf(id, roleID, domainID, members, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, []string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, domainID, members, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// AddDomainRoleActions provides a mock function with given fields: id, roleID, actions, token
func (_m *SDK) AddDomainRoleActions(id string, roleID string, actions []string, token string) ([]string, errors.SDKError) {
	ret := _m.Called(id, roleID, actions, token)

	if len(ret) == 0 {
		panic("no return value specified for AddDomainRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, []string, string) ([]string, errors.SDKError)); ok {
		return rf(id, roleID, actions, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string, string) []string); ok {
		r0 = rf(id, roleID, actions, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, []string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, actions, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// AddDomainRoleMembers provides a mock function with given fields: id, roleID, members, token
func (_m *SDK) AddDomainRoleMembers(id string, roleID string, members []string, token string) ([]string, errors.SDKError) {
	ret := _m.Called(id, roleID, members, token)

	if len(ret) == 0 {
		panic("no return value specified for AddDomainRoleMembers")
	}

	var r0 []string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, []string, string) ([]string, errors.SDKError)); ok {
		return rf(id, roleID, members, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string, string) []string); ok {
		r0 = rf(id, roleID, members, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, []string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, members, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// AddGroupRoleActions provides a mock function with given fields: id, roleID, domainID, actions, token
func (_m *SDK) AddGroupRoleActions(id string, roleID string, domainID string, actions []string, token string) ([]string, errors.SDKError) {
	ret := _m.Called(id, roleID, domainID, actions, token)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, []string, string) ([]string, errors.SDKError)); ok {
		return rf(id, roleID, domainID, actions, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, []string, string) []string); ok {
		r0 = rf(id, roleID, domainID, actions, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, []string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, domainID, actions, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// AddGroupRoleMembers provides a mock function with given fields: id, roleID, domainID, members, token
func (_m *SDK) AddGroupRoleMembers(id string, roleID string, domainID string, members []string, token string) ([]string, errors.SDKError) {
	ret := _m.Called(id, roleID, domainID, members, token)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupRoleMembers")
	}

	var r0 []string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, []string, string) ([]string, errors.SDKError)); ok {
		return rf(id, roleID, domainID, members, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, []string, string) []string); ok {
		r0 = rf(id, roleID, domainID, members, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, []string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, domainID, members, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// AvailableClientRoleActions provides a mock function with given fields: domainID, token
func (_m *SDK) AvailableClientRoleActions(domainID string, token string) ([]string, errors.SDKError) {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for AvailableClientRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) ([]string, errors.SDKError)); ok {
		return rf(domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// AvailableDomainRoleActions provides a mock function with given fields: token
func (_m *SDK) AvailableDomainRoleActions(token string) ([]string, errors.SDKError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for AvailableDomainRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string) ([]string, errors.SDKError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// AvailableGroupRoleActions provides a mock function with given fields: id, token
func (_m *SDK) AvailableGroupRoleActions(id string, token string) ([]string, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for AvailableGroupRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) ([]string, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(id, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Channel provides a mock function with given fields: id, domainID, token
func (_m *SDK) Channel(id string, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Channel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Channel, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Channel); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Channels provides a mock function with given fields: pm, domainID, token
func (_m *SDK) Channels(pm sdk.PageMetadata, domainID string, token string) (sdk.ChannelsPage, errors.SDKError) {
	ret := _m.Called(pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Channels")
	}

	var r0 sdk.ChannelsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) (sdk.ChannelsPage, errors.SDKError)); ok {
		return rf(pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) sdk.ChannelsPage); ok {
		r0 = rf(pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.ChannelsPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Children provides a mock function with given fields: id, domainID, pm, token
func (_m *SDK) Children(id string, domainID string, pm sdk.PageMetadata, token string) (sdk.GroupsPage, errors.SDKError) {
	ret := _m.Called(id, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Children")
	}

	var r0 sdk.GroupsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) (sdk.GroupsPage, errors.SDKError)); ok {
		return rf(id, domainID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) sdk.GroupsPage); ok {
		r0 = rf(id, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.GroupsPage)
	}

	if rf, ok := ret.Get(1).(func(string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(id, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Client provides a mock function with given fields: id, domainID, token
func (_m *SDK) Client(id string, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Client, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Client); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ClientRole provides a mock function with given fields: id, roleID, domainID, token
func (_m *SDK) ClientRole(id string, roleID string, domainID string, token string) (sdk.Role, errors.SDKError) {
	ret := _m.Called(id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ClientRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) (sdk.Role, errors.SDKError)); ok {
		return rf(id, roleID, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) sdk.Role); ok {
		r0 = rf(id, roleID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ClientRoleActions provides a mock function with given fields: id, roleID, domainID, token
func (_m *SDK) ClientRoleActions(id string, roleID string, domainID string, token string) ([]string, errors.SDKError) {
	ret := _m.Called(id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ClientRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) ([]string, errors.SDKError)); ok {
		return rf(id, roleID, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) []string); ok {
		r0 = rf(id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ClientRoleMembers provides a mock function with given fields: id, roleID, domainID, pm, token
func (_m *SDK) ClientRoleMembers(id string, roleID string, domainID string, pm sdk.PageMetadata, token string) (sdk.RoleMembersPage, errors.SDKError) {
	ret := _m.Called(id, roleID, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ClientRoleMembers")
	}

	var r0 sdk.RoleMembersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, sdk.PageMetadata, string) (sdk.RoleMembersPage, errors.SDKError)); ok {
		return rf(id, roleID, domainID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, sdk.PageMetadata, string) sdk.RoleMembersPage); ok {
		r0 = rf(id, roleID, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.RoleMembersPage)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(id, roleID, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ClientRoles provides a mock function with given fields: id, domainID, pm, token
func (_m *SDK) ClientRoles(id string, domainID string, pm sdk.PageMetadata, token string) (sdk.RolesPage, errors.SDKError) {
	ret := _m.Called(id, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ClientRoles")
	}

	var r0 sdk.RolesPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) (sdk.RolesPage, errors.SDKError)); ok {
		return rf(id, domainID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) sdk.RolesPage); ok {
		r0 = rf(id, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.RolesPage)
	}

	if rf, ok := ret.Get(1).(func(string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(id, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Clients provides a mock function with given fields: pm, domainID, token
func (_m *SDK) Clients(pm sdk.PageMetadata, domainID string, token string) (sdk.ClientsPage, errors.SDKError) {
	ret := _m.Called(pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Clients")
	}

	var r0 sdk.ClientsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) (sdk.ClientsPage, errors.SDKError)); ok {
		return rf(pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) sdk.ClientsPage); ok {
		r0 = rf(pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.ClientsPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Connect provides a mock function with given fields: conn, domainID, token
func (_m *SDK) Connect(conn sdk.Connection, domainID string, token string) errors.SDKError {
	ret := _m.Called(conn, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Connection, string, string) errors.SDKError); ok {
		r0 = rf(conn, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// ConnectClients provides a mock function with given fields: channelID, clientIDs, connTypes, domainID, token
func (_m *SDK) ConnectClients(channelID string, clientIDs []string, connTypes []string, domainID string, token string) errors.SDKError {
	ret := _m.Called(channelID, clientIDs, connTypes, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ConnectClients")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, []string, []string, string, string) errors.SDKError); ok {
		r0 = rf(channelID, clientIDs, connTypes, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// CreateChannel provides a mock function with given fields: channel, domainID, token
func (_m *SDK) CreateChannel(channel sdk.Channel, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _m.Called(channel, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Channel, string, string) (sdk.Channel, errors.SDKError)); ok {
		return rf(channel, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Channel, string, string) sdk.Channel); ok {
		r0 = rf(channel, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}

	if rf, ok := ret.Get(1).(func(sdk.Channel, string, string) errors.SDKError); ok {
		r1 = rf(channel, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateChannels provides a mock function with given fields: channels, domainID, token
func (_m *SDK) CreateChannels(channels []sdk.Channel, domainID string, token string) ([]sdk.Channel, errors.SDKError) {
	ret := _m.Called(channels, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannels")
	}

	var r0 []sdk.Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func([]sdk.Channel, string, string) ([]sdk.Channel, errors.SDKError)); ok {
		return rf(channels, domainID, token)
	}
	if rf, ok := ret.Get(0).(func([]sdk.Channel, string, string) []sdk.Channel); ok {
		r0 = rf(channels, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sdk.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func([]sdk.Channel, string, string) errors.SDKError); ok {
		r1 = rf(channels, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateClient provides a mock function with given fields: client, domainID, token
func (_m *SDK) CreateClient(client sdk.Client, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _m.Called(client, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateClient")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Client, string, string) (sdk.Client, errors.SDKError)); ok {
		return rf(client, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Client, string, string) sdk.Client); ok {
		r0 = rf(client, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}

	if rf, ok := ret.Get(1).(func(sdk.Client, string, string) errors.SDKError); ok {
		r1 = rf(client, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateClientRole provides a mock function with given fields: id, domainID, rq, token
func (_m *SDK) CreateClientRole(id string, domainID string, rq sdk.RoleReq, token string) (sdk.Role, errors.SDKError) {
	ret := _m.Called(id, domainID, rq, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateClientRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, sdk.RoleReq, string) (sdk.Role, errors.SDKError)); ok {
		return rf(id, domainID, rq, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, sdk.RoleReq, string) sdk.Role); ok {
		r0 = rf(id, domainID, rq, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}

	if rf, ok := ret.Get(1).(func(string, string, sdk.RoleReq, string) errors.SDKError); ok {
		r1 = rf(id, domainID, rq, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateClients provides a mock function with given fields: client, domainID, token
func (_m *SDK) CreateClients(client []sdk.Client, domainID string, token string) ([]sdk.Client, errors.SDKError) {
	ret := _m.Called(client, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateClients")
	}

	var r0 []sdk.Client
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func([]sdk.Client, string, string) ([]sdk.Client, errors.SDKError)); ok {
		return rf(client, domainID, token)
	}
	if rf, ok := ret.Get(0).(func([]sdk.Client, string, string) []sdk.Client); ok {
		r0 = rf(client, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sdk.Client)
		}
	}

	if rf, ok := ret.Get(1).(func([]sdk.Client, string, string) errors.SDKError); ok {
		r1 = rf(client, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateDomain provides a mock function with given fields: d, token
func (_m *SDK) CreateDomain(d sdk.Domain, token string) (sdk.Domain, errors.SDKError) {
	ret := _m.Called(d, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 sdk.Domain
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Domain, string) (sdk.Domain, errors.SDKError)); ok {
		return rf(d, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Domain, string) sdk.Domain); ok {
		r0 = rf(d, token)
	} else {
		r0 = ret.Get(0).(sdk.Domain)
	}

	if rf, ok := ret.Get(1).(func(sdk.Domain, string) errors.SDKError); ok {
		r1 = rf(d, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateDomainRole provides a mock function with given fields: id, rq, token
func (_m *SDK) CreateDomainRole(id string, rq sdk.RoleReq, token string) (sdk.Role, errors.SDKError) {
	ret := _m.Called(id, rq, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomainRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.RoleReq, string) (sdk.Role, errors.SDKError)); ok {
		return rf(id, rq, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.RoleReq, string) sdk.Role); ok {
		r0 = rf(id, rq, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.RoleReq, string) errors.SDKError); ok {
		r1 = rf(id, rq, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: group, domainID, token
func (_m *SDK) CreateGroup(group sdk.Group, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _m.Called(group, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Group, string, string) (sdk.Group, errors.SDKError)); ok {
		return rf(group, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Group, string, string) sdk.Group); ok {
		r0 = rf(group, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}

	if rf, ok := ret.Get(1).(func(sdk.Group, string, string) errors.SDKError); ok {
		r1 = rf(group, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateGroupRole provides a mock function with given fields: id, domainID, rq, token
func (_m *SDK) CreateGroupRole(id string, domainID string, rq sdk.RoleReq, token string) (sdk.Role, errors.SDKError) {
	ret := _m.Called(id, domainID, rq, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, sdk.RoleReq, string) (sdk.Role, errors.SDKError)); ok {
		return rf(id, domainID, rq, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, sdk.RoleReq, string) sdk.Role); ok {
		r0 = rf(id, domainID, rq, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}

	if rf, ok := ret.Get(1).(func(string, string, sdk.RoleReq, string) errors.SDKError); ok {
		r1 = rf(id, domainID, rq, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateToken provides a mock function with given fields: lt
func (_m *SDK) CreateToken(lt sdk.Login) (sdk.Token, errors.SDKError) {
	ret := _m.Called(lt)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 sdk.Token
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Login) (sdk.Token, errors.SDKError)); ok {
		return rf(lt)
	}
	if rf, ok := ret.Get(0).(func(sdk.Login) sdk.Token); ok {
		r0 = rf(lt)
	} else {
		r0 = ret.Get(0).(sdk.Token)
	}

	if rf, ok := ret.Get(1).(func(sdk.Login) errors.SDKError); ok {
		r1 = rf(lt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: user, token
func (_m *SDK) CreateUser(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DeleteChannel provides a mock function with given fields: id, domainID, token
func (_m *SDK) DeleteChannel(id string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannel")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DeleteClient provides a mock function with given fields: id, domainID, token
func (_m *SDK) DeleteClient(id string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClient")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DeleteClientRole provides a mock function with given fields: id, roleID, domainID, token
func (_m *SDK) DeleteClientRole(id string, roleID string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClientRole")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DeleteDomainRole provides a mock function with given fields: id, roleID, token
func (_m *SDK) DeleteDomainRole(id string, roleID string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomainRole")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DeleteGroup provides a mock function with given fields: id, domainID, token
func (_m *SDK) DeleteGroup(id string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DeleteGroupRole provides a mock function with given fields: id, roleID, domainID, token
func (_m *SDK) DeleteGroupRole(id string, roleID string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupRole")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DeleteInvitation provides a mock function with given fields: userID, domainID, token
func (_m *SDK) DeleteInvitation(userID string, domainID string, token string) error {
	ret := _m.Called(userID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvitation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userID, domainID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id, token
func (_m *SDK) DeleteUser(id string, token string) errors.SDKError {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) errors.SDKError); ok {
		r0 = rf(id, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DisableChannel provides a mock function with given fields: id, domainID, token
func (_m *SDK) DisableChannel(id string, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableChannel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Channel, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Channel); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DisableClient provides a mock function with given fields: id, domainID, token
func (_m *SDK) DisableClient(id string, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableClient")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Client, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Client); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DisableDomain provides a mock function with given fields: domainID, token
func (_m *SDK) DisableDomain(domainID string, token string) errors.SDKError {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableDomain")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) errors.SDKError); ok {
		r0 = rf(domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DisableGroup provides a mock function with given fields: id, domainID, token
func (_m *SDK) DisableGroup(id string, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableGroup")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Group, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Group); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DisableUser provides a mock function with given fields: id, token
func (_m *SDK) DisableUser(id string, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableUser")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (sdk.User, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) sdk.User); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields: conn, domainID, token
func (_m *SDK) Disconnect(conn sdk.Connection, domainID string, token string) errors.SDKError {
	ret := _m.Called(conn, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Connection, string, string) errors.SDKError); ok {
		r0 = rf(conn, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DisconnectClients provides a mock function with given fields: channelID, clientIDs, connTypes, domainID, token
func (_m *SDK) DisconnectClients(channelID string, clientIDs []string, connTypes []string, domainID string, token string) errors.SDKError {
	ret := _m.Called(channelID, clientIDs, connTypes, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectClients")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, []string, []string, string, string) errors.SDKError); ok {
		r0 = rf(channelID, clientIDs, connTypes, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// Domain provides a mock function with given fields: domainID, token
func (_m *SDK) Domain(domainID string, token string) (sdk.Domain, errors.SDKError) {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Domain")
	}

	var r0 sdk.Domain
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (sdk.Domain, errors.SDKError)); ok {
		return rf(domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) sdk.Domain); ok {
		r0 = rf(domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Domain)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DomainRole provides a mock function with given fields: id, roleID, token
func (_m *SDK) DomainRole(id string, roleID string, token string) (sdk.Role, errors.SDKError) {
	ret := _m.Called(id, roleID, token)

	if len(ret) == 0 {
		panic("no return value specified for DomainRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Role, errors.SDKError)); ok {
		return rf(id, roleID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Role); ok {
		r0 = rf(id, roleID, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DomainRoleActions provides a mock function with given fields: id, roleID, token
func (_m *SDK) DomainRoleActions(id string, roleID string, token string) ([]string, errors.SDKError) {
	ret := _m.Called(id, roleID, token)

	if len(ret) == 0 {
		panic("no return value specified for DomainRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) ([]string, errors.SDKError)); ok {
		return rf(id, roleID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []string); ok {
		r0 = rf(id, roleID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DomainRoleMembers provides a mock function with given fields: id, roleID, pm, token
func (_m *SDK) DomainRoleMembers(id string, roleID string, pm sdk.PageMetadata, token string) (sdk.RoleMembersPage, errors.SDKError) {
	ret := _m.Called(id, roleID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for DomainRoleMembers")
	}

	var r0 sdk.RoleMembersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) (sdk.RoleMembersPage, errors.SDKError)); ok {
		return rf(id, roleID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) sdk.RoleMembersPage); ok {
		r0 = rf(id, roleID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.RoleMembersPage)
	}

	if rf, ok := ret.Get(1).(func(string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(id, roleID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DomainRoles provides a mock function with given fields: id, pm, token
func (_m *SDK) DomainRoles(id string, pm sdk.PageMetadata, token string) (sdk.RolesPage, errors.SDKError) {
	ret := _m.Called(id, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for DomainRoles")
	}

	var r0 sdk.RolesPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) (sdk.RolesPage, errors.SDKError)); ok {
		return rf(id, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) sdk.RolesPage); ok {
		r0 = rf(id, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.RolesPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(id, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Domains provides a mock function with given fields: pm, token
func (_m *SDK) Domains(pm sdk.PageMetadata, token string) (sdk.DomainsPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Domains")
	}

	var r0 sdk.DomainsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) (sdk.DomainsPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) sdk.DomainsPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(sdk.DomainsPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// EnableChannel provides a mock function with given fields: id, domainID, token
func (_m *SDK) EnableChannel(id string, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableChannel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Channel, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Channel); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// EnableClient provides a mock function with given fields: id, domainID, token
func (_m *SDK) EnableClient(id string, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableClient")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Client, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Client); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// EnableDomain provides a mock function with given fields: domainID, token
func (_m *SDK) EnableDomain(domainID string, token string) errors.SDKError {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableDomain")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) errors.SDKError); ok {
		r0 = rf(domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// EnableGroup provides a mock function with given fields: id, domainID, token
func (_m *SDK) EnableGroup(id string, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableGroup")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Group, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Group); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// EnableUser provides a mock function with given fields: id, token
func (_m *SDK) EnableUser(id string, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableUser")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (sdk.User, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) sdk.User); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// FreezeDomain provides a mock function with given fields: domainID, token
func (_m *SDK) FreezeDomain(domainID string, token string) errors.SDKError {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for FreezeDomain")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) errors.SDKError); ok {
		r0 = rf(domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// Group provides a mock function with given fields: id, domainID, token
func (_m *SDK) Group(id string, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Group, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Group); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// GroupRole provides a mock function with given fields: id, roleID, domainID, token
func (_m *SDK) GroupRole(id string, roleID string, domainID string, token string) (sdk.Role, errors.SDKError) {
	ret := _m.Called(id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for GroupRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) (sdk.Role, errors.SDKError)); ok {
		return rf(id, roleID, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) sdk.Role); ok {
		r0 = rf(id, roleID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// GroupRoleActions provides a mock function with given fields: id, roleID, domainID, token
func (_m *SDK) GroupRoleActions(id string, roleID string, domainID string, token string) ([]string, errors.SDKError) {
	ret := _m.Called(id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for GroupRoleActions")
	}

	var r0 []string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) ([]string, errors.SDKError)); ok {
		return rf(id, roleID, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) []string); ok {
		r0 = rf(id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// GroupRoleMembers provides a mock function with given fields: id, roleID, domainID, pm, token
func (_m *SDK) GroupRoleMembers(id string, roleID string, domainID string, pm sdk.PageMetadata, token string) (sdk.RoleMembersPage, errors.SDKError) {
	ret := _m.Called(id, roleID, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for GroupRoleMembers")
	}

	var r0 sdk.RoleMembersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, sdk.PageMetadata, string) (sdk.RoleMembersPage, errors.SDKError)); ok {
		return rf(id, roleID, domainID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, sdk.PageMetadata, string) sdk.RoleMembersPage); ok {
		r0 = rf(id, roleID, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.RoleMembersPage)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(id, roleID, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// GroupRoles provides a mock function with given fields: id, domainID, pm, token
func (_m *SDK) GroupRoles(id string, domainID string, pm sdk.PageMetadata, token string) (sdk.RolesPage, errors.SDKError) {
	ret := _m.Called(id, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for GroupRoles")
	}

	var r0 sdk.RolesPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) (sdk.RolesPage, errors.SDKError)); ok {
		return rf(id, domainID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) sdk.RolesPage); ok {
		r0 = rf(id, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.RolesPage)
	}

	if rf, ok := ret.Get(1).(func(string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(id, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Groups provides a mock function with given fields: pm, domainID, token
func (_m *SDK) Groups(pm sdk.PageMetadata, domainID string, token string) (sdk.GroupsPage, errors.SDKError) {
	ret := _m.Called(pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Groups")
	}

	var r0 sdk.GroupsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) (sdk.GroupsPage, errors.SDKError)); ok {
		return rf(pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) sdk.GroupsPage); ok {
		r0 = rf(pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.GroupsPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Health provides a mock function with given fields: service
func (_m *SDK) Health(service string) (sdk.HealthInfo, errors.SDKError) {
	ret := _m.Called(service)

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 sdk.HealthInfo
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string) (sdk.HealthInfo, errors.SDKError)); ok {
		return rf(service)
	}
	if rf, ok := ret.Get(0).(func(string) sdk.HealthInfo); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Get(0).(sdk.HealthInfo)
	}

	if rf, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = rf(service)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Hierarchy provides a mock function with given fields: id, domainID, pm, token
func (_m *SDK) Hierarchy(id string, domainID string, pm sdk.PageMetadata, token string) (sdk.GroupsHierarchyPage, errors.SDKError) {
	ret := _m.Called(id, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Hierarchy")
	}

	var r0 sdk.GroupsHierarchyPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) (sdk.GroupsHierarchyPage, errors.SDKError)); ok {
		return rf(id, domainID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) sdk.GroupsHierarchyPage); ok {
		r0 = rf(id, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.GroupsHierarchyPage)
	}

	if rf, ok := ret.Get(1).(func(string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(id, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Invitation provides a mock function with given fields: userID, domainID, token
func (_m *SDK) Invitation(userID string, domainID string, token string) (sdk.Invitation, error) {
	ret := _m.Called(userID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Invitation")
	}

	var r0 sdk.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Invitation, error)); ok {
		return rf(userID, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Invitation); ok {
		r0 = rf(userID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Invitation)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(userID, domainID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invitations provides a mock function with given fields: pm, token
func (_m *SDK) Invitations(pm sdk.PageMetadata, token string) (sdk.InvitationPage, error) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Invitations")
	}

	var r0 sdk.InvitationPage
	var r1 error
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) (sdk.InvitationPage, error)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) sdk.InvitationPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(sdk.InvitationPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string) error); ok {
		r1 = rf(pm, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssueCert provides a mock function with given fields: clientID, validity, domainID, token
func (_m *SDK) IssueCert(clientID string, validity string, domainID string, token string) (sdk.Cert, errors.SDKError) {
	ret := _m.Called(clientID, validity, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for IssueCert")
	}

	var r0 sdk.Cert
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) (sdk.Cert, errors.SDKError)); ok {
		return rf(clientID, validity, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) sdk.Cert); ok {
		r0 = rf(clientID, validity, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Cert)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) errors.SDKError); ok {
		r1 = rf(clientID, validity, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Journal provides a mock function with given fields: entityType, entityID, domainID, pm, token
func (_m *SDK) Journal(entityType string, entityID string, domainID string, pm sdk.PageMetadata, token string) (sdk.JournalsPage, error) {
	ret := _m.Called(entityType, entityID, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Journal")
	}

	var r0 sdk.JournalsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, sdk.PageMetadata, string) (sdk.JournalsPage, error)); ok {
		return rf(entityType, entityID, domainID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, sdk.PageMetadata, string) sdk.JournalsPage); ok {
		r0 = rf(entityType, entityID, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.JournalsPage)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, sdk.PageMetadata, string) error); ok {
		r1 = rf(entityType, entityID, domainID, pm, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelMembers provides a mock function with given fields: channelID, domainID, pm, token
func (_m *SDK) ListChannelMembers(channelID string, domainID string, pm sdk.PageMetadata, token string) (sdk.EntityMembersPage, errors.SDKError) {
	ret := _m.Called(channelID, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelMembers")
	}

	var r0 sdk.EntityMembersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) (sdk.EntityMembersPage, errors.SDKError)); ok {
		return rf(channelID, domainID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) sdk.EntityMembersPage); ok {
		r0 = rf(channelID, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.EntityMembersPage)
	}

	if rf, ok := ret.Get(1).(func(string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(channelID, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListClientMembers provides a mock function with given fields: clientID, domainID, pm, token
func (_m *SDK) ListClientMembers(clientID string, domainID string, pm sdk.PageMetadata, token string) (sdk.EntityMembersPage, errors.SDKError) {
	ret := _m.Called(clientID, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListClientMembers")
	}

	var r0 sdk.EntityMembersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) (sdk.EntityMembersPage, errors.SDKError)); ok {
		return rf(clientID, domainID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) sdk.EntityMembersPage); ok {
		r0 = rf(clientID, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.EntityMembersPage)
	}

	if rf, ok := ret.Get(1).(func(string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(clientID, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListDomainMembers provides a mock function with given fields: domainID, pm, token
func (_m *SDK) ListDomainMembers(domainID string, pm sdk.PageMetadata, token string) (sdk.EntityMembersPage, errors.SDKError) {
	ret := _m.Called(domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListDomainMembers")
	}

	var r0 sdk.EntityMembersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) (sdk.EntityMembersPage, errors.SDKError)); ok {
		return rf(domainID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) sdk.EntityMembersPage); ok {
		r0 = rf(domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.EntityMembersPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListGroupMembers provides a mock function with given fields: groupID, domainID, pm, token
func (_m *SDK) ListGroupMembers(groupID string, domainID string, pm sdk.PageMetadata, token string) (sdk.EntityMembersPage, errors.SDKError) {
	ret := _m.Called(groupID, domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupMembers")
	}

	var r0 sdk.EntityMembersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) (sdk.EntityMembersPage, errors.SDKError)); ok {
		return rf(groupID, domainID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) sdk.EntityMembersPage); ok {
		r0 = rf(groupID, domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.EntityMembersPage)
	}

	if rf, ok := ret.Get(1).(func(string, string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(groupID, domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: token
func (_m *SDK) RefreshToken(token string) (sdk.Token, errors.SDKError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 sdk.Token
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string) (sdk.Token, errors.SDKError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) sdk.Token); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(sdk.Token)
	}

	if rf, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// RejectInvitation provides a mock function with given fields: domainID, token
func (_m *SDK) RejectInvitation(domainID string, token string) error {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RejectInvitation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(domainID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAllChildren provides a mock function with given fields: id, domainID, token
func (_m *SDK) RemoveAllChildren(id string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllChildren")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveAllClientRoleActions provides a mock function with given fields: id, roleID, domainID, token
func (_m *SDK) RemoveAllClientRoleActions(id string, roleID string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllClientRoleActions")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveAllClientRoleMembers provides a mock function with given fields: id, roleID, domainID, token
func (_m *SDK) RemoveAllClientRoleMembers(id string, roleID string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllClientRoleMembers")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveAllDomainRoleActions provides a mock function with given fields: id, roleID, token
func (_m *SDK) RemoveAllDomainRoleActions(id string, roleID string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllDomainRoleActions")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveAllDomainRoleMembers provides a mock function with given fields: id, roleID, token
func (_m *SDK) RemoveAllDomainRoleMembers(id string, roleID string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllDomainRoleMembers")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveAllGroupRoleActions provides a mock function with given fields: id, roleID, domainID, token
func (_m *SDK) RemoveAllGroupRoleActions(id string, roleID string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllGroupRoleActions")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveAllGroupRoleMembers provides a mock function with given fields: id, roleID, domainID, token
func (_m *SDK) RemoveAllGroupRoleMembers(id string, roleID string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllGroupRoleMembers")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveChannelParent provides a mock function with given fields: id, domainID, groupID, token
func (_m *SDK) RemoveChannelParent(id string, domainID string, groupID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, groupID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChannelParent")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, groupID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveChildren provides a mock function with given fields: id, domainID, groupIDs, token
func (_m *SDK) RemoveChildren(id string, domainID string, groupIDs []string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, groupIDs, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveChildren")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, []string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, groupIDs, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveClientParent provides a mock function with given fields: id, domainID, groupID, token
func (_m *SDK) RemoveClientParent(id string, domainID string, groupID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, groupID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveClientParent")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, groupID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveClientRoleActions provides a mock function with given fields: id, roleID, domainID, actions, token
func (_m *SDK) RemoveClientRoleActions(id string, roleID string, domainID string, actions []string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, domainID, actions, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveClientRoleActions")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, []string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, domainID, actions, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveClientRoleMembers provides a mock function with given fields: id, roleID, domainID, members, token
func (_m *SDK) RemoveClientRoleMembers(id string, roleID string, domainID string, members []string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, domainID, members, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveClientRoleMembers")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, []string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, domainID, members, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveDomainRoleActions provides a mock function with given fields: id, roleID, actions, token
func (_m *SDK) RemoveDomainRoleActions(id string, roleID string, actions []string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, actions, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDomainRoleActions")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, []string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, actions, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveDomainRoleMembers provides a mock function with given fields: id, roleID, members, token
func (_m *SDK) RemoveDomainRoleMembers(id string, roleID string, members []string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, members, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDomainRoleMembers")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, []string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, members, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveGroupParent provides a mock function with given fields: id, domainID, groupID, token
func (_m *SDK) RemoveGroupParent(id string, domainID string, groupID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, groupID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupParent")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, groupID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveGroupRoleActions provides a mock function with given fields: id, roleID, domainID, actions, token
func (_m *SDK) RemoveGroupRoleActions(id string, roleID string, domainID string, actions []string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, domainID, actions, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupRoleActions")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, []string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, domainID, actions, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveGroupRoleMembers provides a mock function with given fields: id, roleID, domainID, members, token
func (_m *SDK) RemoveGroupRoleMembers(id string, roleID string, domainID string, members []string, token string) errors.SDKError {
	ret := _m.Called(id, roleID, domainID, members, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupRoleMembers")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, []string, string) errors.SDKError); ok {
		r0 = rf(id, roleID, domainID, members, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// ResetPassword provides a mock function with given fields: password, confPass, token
func (_m *SDK) ResetPassword(password string, confPass string, token string) errors.SDKError {
	ret := _m.Called(password, confPass, token)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(password, confPass, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// ResetPasswordRequest provides a mock function with given fields: email
func (_m *SDK) ResetPasswordRequest(email string) errors.SDKError {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for ResetPasswordRequest")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string) errors.SDKError); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RevokeCert provides a mock function with given fields: clientID, domainID, token
func (_m *SDK) RevokeCert(clientID string, domainID string, token string) (time.Time, errors.SDKError) {
	ret := _m.Called(clientID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RevokeCert")
	}

	var r0 time.Time
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (time.Time, errors.SDKError)); ok {
		return rf(clientID, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) time.Time); ok {
		r0 = rf(clientID, domainID, token)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(clientID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// SearchUsers provides a mock function with given fields: pm, token
func (_m *SDK) SearchUsers(pm sdk.PageMetadata, token string) (sdk.UsersPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for SearchUsers")
	}

	var r0 sdk.UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) (sdk.UsersPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) sdk.UsersPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(sdk.UsersPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// SendInvitation provides a mock function with given fields: invitation, token
func (_m *SDK) SendInvitation(invitation sdk.Invitation, token string) error {
	ret := _m.Called(invitation, token)

	if len(ret) == 0 {
		panic("no return value specified for SendInvitation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sdk.Invitation, string) error); ok {
		r0 = rf(invitation, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessage provides a mock function with given fields: chanID, msg, key
func (_m *SDK) SendMessage(chanID string, msg string, key string) errors.SDKError {
	ret := _m.Called(chanID, msg, key)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(chanID, msg, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// SetChannelParent provides a mock function with given fields: id, domainID, groupID, token
func (_m *SDK) SetChannelParent(id string, domainID string, groupID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, groupID, token)

	if len(ret) == 0 {
		panic("no return value specified for SetChannelParent")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, groupID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// SetClientParent provides a mock function with given fields: id, domainID, groupID, token
func (_m *SDK) SetClientParent(id string, domainID string, groupID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, groupID, token)

	if len(ret) == 0 {
		panic("no return value specified for SetClientParent")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, groupID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// SetContentType provides a mock function with given fields: ct
func (_m *SDK) SetContentType(ct sdk.ContentType) errors.SDKError {
	ret := _m.Called(ct)

	if len(ret) == 0 {
		panic("no return value specified for SetContentType")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.ContentType) errors.SDKError); ok {
		r0 = rf(ct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// SetGroupParent provides a mock function with given fields: id, domainID, groupID, token
func (_m *SDK) SetGroupParent(id string, domainID string, groupID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, groupID, token)

	if len(ret) == 0 {
		panic("no return value specified for SetGroupParent")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, groupID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// UpdateChannel provides a mock function with given fields: channel, domainID, token
func (_m *SDK) UpdateChannel(channel sdk.Channel, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _m.Called(channel, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Channel, string, string) (sdk.Channel, errors.SDKError)); ok {
		return rf(channel, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Channel, string, string) sdk.Channel); ok {
		r0 = rf(channel, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}

	if rf, ok := ret.Get(1).(func(sdk.Channel, string, string) errors.SDKError); ok {
		r1 = rf(channel, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateChannelTags provides a mock function with given fields: c, domainID, token
func (_m *SDK) UpdateChannelTags(c sdk.Channel, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _m.Called(c, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelTags")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Channel, string, string) (sdk.Channel, errors.SDKError)); ok {
		return rf(c, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Channel, string, string) sdk.Channel); ok {
		r0 = rf(c, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}

	if rf, ok := ret.Get(1).(func(sdk.Channel, string, string) errors.SDKError); ok {
		r1 = rf(c, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateClient provides a mock function with given fields: client, domainID, token
func (_m *SDK) UpdateClient(client sdk.Client, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _m.Called(client, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClient")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Client, string, string) (sdk.Client, errors.SDKError)); ok {
		return rf(client, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Client, string, string) sdk.Client); ok {
		r0 = rf(client, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}

	if rf, ok := ret.Get(1).(func(sdk.Client, string, string) errors.SDKError); ok {
		r1 = rf(client, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateClientRole provides a mock function with given fields: id, roleID, newName, domainID, token
func (_m *SDK) UpdateClientRole(id string, roleID string, newName string, domainID string, token string) (sdk.Role, errors.SDKError) {
	ret := _m.Called(id, roleID, newName, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) (sdk.Role, errors.SDKError)); ok {
		return rf(id, roleID, newName, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) sdk.Role); ok {
		r0 = rf(id, roleID, newName, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, newName, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateClientSecret provides a mock function with given fields: id, secret, domainID, token
func (_m *SDK) UpdateClientSecret(id string, secret string, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _m.Called(id, secret, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientSecret")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) (sdk.Client, errors.SDKError)); ok {
		return rf(id, secret, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) sdk.Client); ok {
		r0 = rf(id, secret, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) errors.SDKError); ok {
		r1 = rf(id, secret, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateClientTags provides a mock function with given fields: client, domainID, token
func (_m *SDK) UpdateClientTags(client sdk.Client, domainID string, token string) (sdk.Client, errors.SDKError) {
	ret := _m.Called(client, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientTags")
	}

	var r0 sdk.Client
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Client, string, string) (sdk.Client, errors.SDKError)); ok {
		return rf(client, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Client, string, string) sdk.Client); ok {
		r0 = rf(client, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Client)
	}

	if rf, ok := ret.Get(1).(func(sdk.Client, string, string) errors.SDKError); ok {
		r1 = rf(client, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateDomain provides a mock function with given fields: d, token
func (_m *SDK) UpdateDomain(d sdk.Domain, token string) (sdk.Domain, errors.SDKError) {
	ret := _m.Called(d, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomain")
	}

	var r0 sdk.Domain
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Domain, string) (sdk.Domain, errors.SDKError)); ok {
		return rf(d, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Domain, string) sdk.Domain); ok {
		r0 = rf(d, token)
	} else {
		r0 = ret.Get(0).(sdk.Domain)
	}

	if rf, ok := ret.Get(1).(func(sdk.Domain, string) errors.SDKError); ok {
		r1 = rf(d, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateDomainRole provides a mock function with given fields: id, roleID, newName, token
func (_m *SDK) UpdateDomainRole(id string, roleID string, newName string, token string) (sdk.Role, errors.SDKError) {
	ret := _m.Called(id, roleID, newName, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) (sdk.Role, errors.SDKError)); ok {
		return rf(id, roleID, newName, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) sdk.Role); ok {
		r0 = rf(id, roleID, newName, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, newName, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: group, domainID, token
func (_m *SDK) UpdateGroup(group sdk.Group, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _m.Called(group, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Group, string, string) (sdk.Group, errors.SDKError)); ok {
		return rf(group, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Group, string, string) sdk.Group); ok {
		r0 = rf(group, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}

	if rf, ok := ret.Get(1).(func(sdk.Group, string, string) errors.SDKError); ok {
		r1 = rf(group, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateGroupRole provides a mock function with given fields: id, roleID, newName, domainID, token
func (_m *SDK) UpdateGroupRole(id string, roleID string, newName string, domainID string, token string) (sdk.Role, errors.SDKError) {
	ret := _m.Called(id, roleID, newName, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupRole")
	}

	var r0 sdk.Role
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) (sdk.Role, errors.SDKError)); ok {
		return rf(id, roleID, newName, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) sdk.Role); ok {
		r0 = rf(id, roleID, newName, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Role)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string) errors.SDKError); ok {
		r1 = rf(id, roleID, newName, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: oldPass, newPass, token
func (_m *SDK) UpdatePassword(oldPass string, newPass string, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(oldPass, newPass, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.User, errors.SDKError)); ok {
		return rf(oldPass, newPass, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.User); ok {
		r0 = rf(oldPass, newPass, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(oldPass, newPass, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateProfilePicture provides a mock function with given fields: user, token
func (_m *SDK) UpdateProfilePicture(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfilePicture")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user, token
func (_m *SDK) UpdateUser(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUserEmail provides a mock function with given fields: user, token
func (_m *SDK) UpdateUserEmail(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserEmail")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUserRole provides a mock function with given fields: user, token
func (_m *SDK) UpdateUserRole(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRole")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUserTags provides a mock function with given fields: user, token
func (_m *SDK) UpdateUserTags(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserTags")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUsername provides a mock function with given fields: user, token
func (_m *SDK) UpdateUsername(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsername")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// User provides a mock function with given fields: id, token
func (_m *SDK) User(id string, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (sdk.User, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) sdk.User); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UserProfile provides a mock function with given fields: token
func (_m *SDK) UserProfile(token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for UserProfile")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string) (sdk.User, errors.SDKError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) sdk.User); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Users provides a mock function with given fields: pm, token
func (_m *SDK) Users(pm sdk.PageMetadata, token string) (sdk.UsersPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Users")
	}

	var r0 sdk.UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) (sdk.UsersPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) sdk.UsersPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(sdk.UsersPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ViewCert provides a mock function with given fields: certID, domainID, token
func (_m *SDK) ViewCert(certID string, domainID string, token string) (sdk.Cert, errors.SDKError) {
	ret := _m.Called(certID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ViewCert")
	}

	var r0 sdk.Cert
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Cert, errors.SDKError)); ok {
		return rf(certID, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Cert); ok {
		r0 = rf(certID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Cert)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(certID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ViewCertByClient provides a mock function with given fields: clientID, domainID, token
func (_m *SDK) ViewCertByClient(clientID string, domainID string, token string) (sdk.CertSerials, errors.SDKError) {
	ret := _m.Called(clientID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ViewCertByClient")
	}

	var r0 sdk.CertSerials
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.CertSerials, errors.SDKError)); ok {
		return rf(clientID, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.CertSerials); ok {
		r0 = rf(clientID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.CertSerials)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(clientID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// NewSDK creates a new instance of SDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *SDK {
	mock := &SDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
