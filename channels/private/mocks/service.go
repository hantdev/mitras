// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	channels "github.com/hantdev/mitras/channels"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Authorize provides a mock function with given fields: ctx, req
func (_m *Service) Authorize(ctx context.Context, req channels.AuthzReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, channels.AuthzReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveClientConnections provides a mock function with given fields: ctx, clientID
func (_m *Service) RemoveClientConnections(ctx context.Context, clientID string) error {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveClientConnections")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveByID provides a mock function with given fields: ctx, id
func (_m *Service) RetrieveByID(ctx context.Context, id string) (channels.Channel, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByID")
	}

	var r0 channels.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (channels.Channel, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) channels.Channel); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(channels.Channel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsetParentGroupFromChannels provides a mock function with given fields: ctx, parentGroupID
func (_m *Service) UnsetParentGroupFromChannels(ctx context.Context, parentGroupID string) error {
	ret := _m.Called(ctx, parentGroupID)

	if len(ret) == 0 {
		panic("no return value specified for UnsetParentGroupFromChannels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, parentGroupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
